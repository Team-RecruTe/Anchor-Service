### default Profile ###
spring:
  profiles:
    active: prod

  datasource:
    hikari:
      master:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${AWS_RDS_MASTER_URL}
        username: ${AWS_RDS_USERNAME}
        password: ${AWS_RDS_PASSWORD}
      slave:
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${AWS_RDS_SLAVE_URL}
        username: ${AWS_RDS_USERNAME}
        password: ${AWS_RDS_PASSWORD}

  cache:
    type: caffeine

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true

  session:
    store-type: redis
    timeout: 3600

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
    web:
      pageable:
        one-indexed-parameters: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            scope:
              - profile
              - email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  thymeleaf:
    cache: false

rest-template:
  timeout: 5
  max-connection: 16
  max-per-route: 16

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    s3:
      bucket: ${AWS_IMAGE_STORAGE}
    region:
      static: ${AWS_REGION}
    stack:
      auto: false
    cron: "0 0 3 * * *"

payment:
  imp-key: ${IMP_KEY}
  imp-secret: ${IMP_SECRET}
  imp-code: ${IMP_CODE}

payup:
  access-token: ${NH_ACCESS_TOKEN}
  iscd: ${NH_ISCD}

logging:
  config: classpath:log4j2/log4j2.yml

---
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: none

    properties:
      hibernate:
        format_sql: ture

---
spring:
  config:
    activate:
      on-profile: test

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true

email:
  test: ${TEST_EMAIL}