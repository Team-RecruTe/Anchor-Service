name: Anchor CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: MAIN

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: current
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32;
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32;

      - name: Start Redis
        uses: supercharge/redis-github-action@1.8.0

      - name: Build Project
        run: |
          gradle clean build --info
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          AWS_RDS_USERNAME: ${{secrets.AWS_RDS_USERNAME}}
          AWS_RDS_PASSWORD: ${{secrets.AWS_RDS_PASSWORD}}
          AWS_RDS_MASTER_URL: ${{ secrets.AWS_RDS_MASTER_URL }}
          AWS_RDS_SLAVE_URL: ${{ secrets.AWS_RDS_SLAVE_URL }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NH_ACCESS_TOKEN: ${{ secrets.NH_ACCESS_TOKEN }}
          NH_ISCD: ${{ secrets.NH_ISCD }}
          REDIS_HOST: localhost # ${{ secrets.REDIS_HOST }}
          REDIS_PORT: 6379 # ${{ secrets.REDIS_PORT }}
          AWS_IMAGE_STORAGE: ${{ secrets.AWS_IMAGE_STORAGE }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMP_CODE: ${{ secrets.IMP_CODE }}
          IMP_KEY: ${{ secrets.IMP_KEY }}
          IMP_SECRET: ${{ secrets.IMP_SECRET }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}

      - name: Zip Build File
        uses: montudor/action-zip@v1

      - name: Upload to S3
        run: |
          zip -vr ./build/$GITHUB_SHA.zip .;
          ls -l ./build;
          aws s3 cp --region ap-northeast-2 ./build/$GITHUB_SHA.zip s3://$AWS_BUCKET_TO_DEPLOY/dev/$GITHUB_SHA.zip;
        env:
          AWS_BUCKET_TO_DEPLOY: ${{ secrets.AWS_BUCKET_TO_DEPLOY }}

      - name: Code Deploy To EC2 instance
        run: aws deploy create-deployment
          --application-name $AWS_CODE_DEPLOY_APP
          --deployment-config-name $AWS_CODE_DEPLOY_CONFIG
          --deployment-group-name $AWS_CODE_DEPLOY_GROUP
          --s3-location bucket=$AWS_BUCKET_TO_DEPLOY,bundleType=zip,key=dev/$GITHUB_SHA.zip
        env:
          AWS_BUCKET_TO_DEPLOY: ${{ secrets.AWS_BUCKET_TO_DEPLOY }}
          AWS_CODE_DEPLOY_APP: ${{ secrets.AWS_CODE_DEPLOY_APP }}
          AWS_CODE_DEPLOY_CONFIG: ${{ secrets.AWS_CODE_DEPLOY_CONFIG }}
          AWS_CODE_DEPLOY_GROUP: ${{ secrets.AWS_CODE_DEPLOY_GROUP }}

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32;
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32;